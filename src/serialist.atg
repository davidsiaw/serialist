#include <map>
#include <sstream>
#include <iostream>
#include "DataStructures.h"

class DuplicateFormatNameException {
public:
	std::wstring name;
	DuplicateFormatNameException(std::wstring name) : name(name) {}
};

COMPILER Serialist

std::map<std::wstring, FormatDesc> formats;

/*--------------------------------------------------------------------------*/
CHARACTERS
  bigletter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
  smallletter = "abcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  underscore = "_".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident = smallletter { bigletter | smallletter | digit | underscore }.
  typeident = bigletter { bigletter | smallletter | digit | underscore }.
  number = digit {digit}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

Name<std::wstring &name> = 
	ident							(. name = std::wstring(t->val); .)
.

Type<std::wstring &tname, bool &basictype> =
									(. basictype = true; .)
	( "Uint8"
	| "Uint16"
	| "Uint32"
	| "Uint64"
	| "Int8"
	| "Int16"
	| "Int32"
	| "Int64"
	| "Float32"
	| "Float64"
	| typeident						(. basictype = false; .)
	)								(. tname = std::wstring(t->val); .)
.

Number<unsigned int& num> =
	number							(. std::wistringstream(t->val) >> num; .)
.

NullTerminate =
	"#0"
.

ArraySize<AttrPtr &attr> =			(. unsigned int num; .)
									(. std::wstring name; .)
	"["
	(
		Number<num>					(. attr = ArrSizePtr(new ArraySizeAttribute(num)); .)
		| Name<name>				(. attr = ArrSizeRefPtr(new ArraySizeReferenceAttribute(name)); .)
		| NullTerminate				(. attr = NullTermPtr(new NullTerminatedAttribute()); .)
	)
	"]"
.

Member<FormatMember &member> =		(. std::wstring tname, name; .)
									(. bool basictype; .)
									(. AttrPtr attr; .)
									(. std::vector<AttrPtr> attrs; .)
	Type<tname, basictype>
	[
		ArraySize<attr>				(. attrs.push_back(attr); .)
	]
	Name<name>
									(. member = FormatMember(name, tname, basictype, attrs); .)
.

Format<FormatDesc& format> =		(. FormatMember member; .)
									(. bool basictype; .)
									(. std::wstring tname; .)
	"format"
	Type<tname, basictype>			(. format = FormatDesc(tname, basictype); .)
	"{"
	{
		Member<member>				(. format.Add(member); .)
	}
	"}"
.

Serialist =							(. FormatDesc format; .)
	{
		Format<format>				(. if (formats.find(format.GetName()) != formats.end()) { 
											throw DuplicateFormatNameException(format.GetName());
										}
										formats[format.GetName()] = format;
									.)
	}
.

END Serialist.
