#!/usr/bin/env ruby

require "serialist-gen/serialist-gen"

require "json"
require "yaml"
require "pp"
require "trollop"


intermediate_dir = File.expand_path "~/.serialist-tmp"

opts = Trollop::options do

	banner <<-EOS
USAGE: serialist-examine <format file> <binary file> <format name> [options]

where [options] are:
	EOS
end

format_file = ARGV.shift
binary_file = ARGV.shift
format_name = ARGV.shift

if !format_file
	Trollop::die "Please specify a format file"
end

if !binary_file
	Trollop::die "Please specify a binary file"
end

if !format_name
	Trollop::die "Please specify a format name"
end

name = File.basename(format_file).gsub(/\.format$/, "")

source = `serialist-gen #{format_file} -t CJSONSource`
source = <<-SOURCE

#include <iostream>

#{source}

int main(int argc, char** argv)
{
	FILE* fp = fopen("#{binary_file}", "rb");

	#{format_name}* pointer;
	SerialistError err = Read#{format_name}(fp, &pointer);

	if (err)
	{
		picojson::object obj;
		obj[L"read_error"] = picojson::value(SerialistErrorWString(err));
		picojson::value errval(obj);
		std::wcout << errval.serialize() << std::endl;
		return EXIT_FAILURE;
	}

	std::wcout << JSONRead#{format_name}(pointer).serialize() << std::endl;
	fclose(fp);
	return EXIT_SUCCESS;
}

SOURCE

puts "Using intermediate directory: #{File.join(intermediate_dir)}"

FileUtils.mkdir_p File.join(intermediate_dir)

File.write(File.join(intermediate_dir, "main.cpp"), source)

c_source = `serialist-gen #{format_file} -t CSource`
File.write(File.join(intermediate_dir, "#{name}.c"), c_source)

h_source = `serialist-gen #{format_file} -t CHeader`
File.write(File.join(intermediate_dir, "#{name}.h"), h_source)

FileUtils.cp(File.join(Gem.datadir("serialist-gen"), "picojson.hpp"), File.join(intermediate_dir, "picojson.hpp"))

`cd #{intermediate_dir} && gcc #{File.join(intermediate_dir, name)}.c -c -o #{File.join(intermediate_dir, name)}.o`
`cd #{intermediate_dir} && g++ #{File.join(intermediate_dir, "main.cpp")} #{File.join(intermediate_dir, name)}.o -o #{File.join(intermediate_dir, "parse")}`


output = `#{File.join(intermediate_dir, "parse")}`
begin
	x = JSON.parse(output)
	puts x.to_yaml
rescue
	puts "Unhandled Error. Output:"
	puts output
end


